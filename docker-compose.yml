version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: kowrite-postgres
    environment:
      POSTGRES_DB: kowrite
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kowrite-network
    restart: unless-stopped

  # Redis (캐싱 및 세션 저장용)
  redis:
    image: redis:7-alpine
    container_name: kowrite-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kowrite-network
    restart: unless-stopped

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kowrite-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: kowrite
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - kowrite-network
    restart: unless-stopped
    command: npm run dev

  # 프론트엔드 개발 서버
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kowrite-frontend
    environment:
      VITE_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - kowrite-network
    restart: unless-stopped
    command: npm run dev

  # Nginx (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: kowrite-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - kowrite-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  kowrite-network:
    driver: bridge
